name: Riscy chips

on:
  push:
    branches:
      - '**'

jobs:
  build_verilator:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Verilator Action
      uses: V0XNIHILI/install-verilator-action@main

    - name: Cache Verilator Binary
      uses: actions/cache@v4
      with:
        path: /usr/local/share/verilator/
        key: verilator-binary

  riscy32_single_components:
    runs-on: ubuntu-latest
    needs: build_verilator

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Perpare for verilator
      run: | 
        sudo mkdir -p /usr/local/share/verilator/
        sudo chown -R $(whoami):$(whoami) /usr/local/share/verilator/

    - name: Restore Verilator Binary
      uses: actions/cache@v4
      with:
        path: /usr/local/share/verilator/
        key: verilator-binary

    - name: Set up verilator
      run: | 
        sudo apt-get install ccache
        chmod -R +x /usr/local/share/verilator/*
        sudo ln -s /usr/local/share/verilator/bin/verilator /usr/local/bin/verilator
        mkdir -p waveforms/vcd

    # We need to rethink these testbenches. I would prefer matrix
    - name: Run the testbenches
      run: |
        ITEMS="alu control register memory" 
        for item in $ITEMS; do
          if item == "alu" || item == "control"; then
            verilator --timescale 10ns/1ns --assert --trace --binary cores/riscy32_single/tests/${item}_tb.sv cores/riscy32_single/src/${item}.sv
          else 
             verilator --clk clk --timescale 10ns/1ns --assert --trace --binary cores/riscy32_single/tests/${item}_tb.sv cores/riscy32_single/src/${item}.sv
          fi
          ./obj_dir/V${item}_tb
          mv ${item}.vcd ./waveforms/vcd/
        done

    - name: Cache vcd
      uses: actions/cache@v4
      with:
        path: ./waveforms
        key: waveforms

  waveforms:
    runs-on: ubuntu-latest
    needs: riscy32_single_components
    steps:
    - name: Restore vcds
      uses: actions/cache@v4
      with:
        path: ./waveforms
        key: waveforms

    - name: Setup sootty
      run: |
        sudo apt-get install -y python3
        python3 -m pip install sootty
        mkdir -p waveforms/svg waveforms/vcd
        
    - name: generate Waveforms
      run: |
        mkdir -p waveforms/svg
        for file in ./waveforms/vcd/*; do
          echo ${file}
          filename=${file##*/}
          sootty "${file}" -s 0 -e 99 -o > waveforms/svg/"${filename%.*}".svg
          if filename%.* != "control"; then
            for i in {1..5}; do
              if i == 3 && filename%.* == "alu"; then break; fi
              sootty "${file}" -s ($i * 100 ) -e (($i + 1)* 100 -1) -o > waveforms/svg/"${filename%.*}_${i}".svg
            done
          fi
        done
      continue-on-error: true

    - name: Upload waveforms as artifact
      uses: actions/upload-artifact@v4
      with:
        name: waveforms
        path: ./waveforms

  conway:
    runs-on: ubuntu-latest
    needs: build_verilator

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Perpare for verilator
      run: | 
        sudo mkdir -p /usr/local/share/verilator/
        sudo chown -R $(whoami):$(whoami) /usr/local/share/verilator/

    - name: Restore Verilator Binary
      uses: actions/cache@v4
      with:
        path: /usr/local/share/verilator/
        key: verilator-binary

    - name: Set up verilator
      run: | 
        sudo apt-get install ccache
        chmod -R +x /usr/local/share/verilator/*
        sudo ln -s /usr/local/share/verilator/bin/verilator /usr/local/bin/verilator

    - name: Run the testbench
      run: | 
        verilator --timescale 10ns/1ns --clk --assert -Wall --trace --binary cores/conway/tests/conway_tb.sv cores/conway/src/conway.sv;
        ./obj_dir/Vconway_tb
